--------------------------------------------------------------------------------
turbografx cd-rom hardware notes.
information collected during the research for work over turbo everdrive pro dev
by krikzz 2022
--------------------------------------------------------------------------------
------------------------------------REGISTERS-----------------------------------(read/write)
----------------------------------------------------------------------------1800 CD_STAT
--------------------------------------------------------------------------------
CD-ROM interface status
write to this reg begins new command cycle if value in 1801 is not zero

0: ?
1: ?
2: ?
3: CD_STAT_DDIR
4: CD_STAT_CDAT
5: CD_STAT_END
6: CD_STAT_DRDY
7: CD_STAT_EXEC

CD_STAT_DDIR:
0: cd expects write ops via 1801. commands write
1: cd expects read ops via 1801. data/resp read

CD_STAT_CDAT:
0: when data exchange via 1801
1: when cmd/resp exchange via 1801

CD_STAT_END:
1: when last resp byte in 1801

CD_STAT_DRDY:
0: busy. can't read/write 1801
1: cpu can read/write 1801

CD_STAT_EXEC:
0: when cmd execution complete
1: when cd-rom transfer or receiving commands or data

common status values:
0x00: cmd execution complete. idle? this status comes after second resp byte read
0xD0: can write next cmd byte
0x90: busy. befor write next cmd byte
0x88: bysy. befor read next data byte
0x98: busy. befor read first resp byte
0xB8: bysy. befor read second resp byte
0xC8: can read data byte
0xD8: can read first cmd resp byte (cmd execution result)
0xF8: can read second cmd resp byte (cmd execution result)
0x80: track playback. appears after cmd D9 with play mode 1 or 2
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------1801 CD_DATA
--------------------------------------------------------------------------------
data/command buffer for communication with CD-ROM.
all bits can be read back.
when cpu send commands to cd-rom, 1801 val transfer to cd-rom i/o latch 
at CD_CTRL_DCLK rising edge.
1801 modification after CD_CTRL_DCLK rising edge have no any affect.
byte from 1801 will be sent to cd-rom i/o latch only if CD_CTRL_DCLK rising 
edge occurs while CD_STAT_DRDY is set to 1
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------1802 CD_CTRL
--------------------------------------------------------------------------------
CD-ROM control
irq handler must turn off *_IRQ flags to acknowledge interrupt
all bits can be read back

0: ?
1: ?
2: CD_CTRL_AD32K_IRQ
3: CD_CTRL_ADEND_IRQ
4: ?
5: CD_CTRL_DEND_IRQ
6: CD_CTRL_DRDY_IRQ
7: CD_CTRL_DCLK

CD_CTRL_AD32K_IRQ:
irq2 if remine bytes in adpcm sample less than 32KB
if enabled, irq fire when X_STAT_ADPCM_32K sets

CD_CTRL_ADEND_IRQ:
irq2 in the end of adpcm sample playback
if enabled, irq fire when X_STAT_ADPCM_END sets

CD_CTRL_DEND_IRQ:
enable irq2 if all data bytes readed. effect the same for dma and reads via 1801
irq triggers when 1800 become 0xD8/F8

CD_CTRL_DRDY_IRQ:
enable irq2 if first data byte already in 1801. 
irq triggers when 1800 become 0xC8

CD_CTRL_DCLK:
CD-ROM controller start processing next byte at 1801 at rising edge
toggle this bit after each read/write operation via 1801.
typically bios write data/cmd byte to 1801, then write 0x81 and 0x80 to the 1802
--------------------------------------------------------------------------------(read)
----------------------------------------------------------------------------1803 X_STAT
--------------------------------------------------------------------------------
various system status flags and bram lock. reading this register will 
rest BRM_UNLOCK flag

0: ?
1: X_STAT_PCM_CHAN
2: X_STAT_ADPCM_32K
3: X_STAT_ADPCM_END
4: X_STAT_MOTOR
5: X_STAT_TEND
6: X_STAT_DRDY
7: ?

1:X_STAT_PCM_CHAN:
0: 1805/6 returns left channel
1: 1805/6 returns right channel
any writes to the 1805 toggle this bit and latch current CDDA volume

2:X_STAT_ADPCM_32K:
0: if remain sample len more than 32KB
1: if remain sample len less than 32KB
logic: it sets to 1 if adpcm len less than 32K after decrement (bit 15 is 0)
logic: it sets to 1 if adpcm len less than 32K before increment (bit 15 is 0)
adpcm len counter decrements when adpcm ram readed by cpu or pcm player
adpcm len counter increments when adpcm ram written by cpu or dma
flag resets if 180D:4 or 180D:7 is set

3:X_STAT_ADPCM_END:
0: during ADPCM playback
1: after ADPCM sample end
logic: it sets to 1 if adpcm len counter decremented while it already 0
if this flag set, decrement logic will be turned off.
adpcm len counter decrements when adpcm ram readed by cpu or pcm player
cpu reads via 180A, player reads if sample playback enabled
flag resets if 180D:4 or 180D:7 is set

4:X_STAT_MOTOR:
1: set when motor spin the disk
0: motor stopped. 
it does not switch from 1 to 0 till be refreshed by reading 1807
after reset motor stopped, it starts after scsi cmd 0 (TEST UNIT READY)

5:X_STAT_TEND:
0: if any data bytes remain
1: if all data bytes readed
seems it sets to 1 when value in 1800 is D8 or F8
bios test this bit during dma. busy loop till it == 0

6:X_STAT_DRDY:
seems if mirror of CD_STAT_DRDY
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------1804 CD_RST
--------------------------------------------------------------------------------
reset CD-ROM hardware
bits 0-3 can be read back

0: ?
1: CD_RST
2: ?
3: ?
4: ?
5: ?
6: ?
7: ?

CD_RST:
 stop motor and 1800 value become 0
--------------------------------------------------------------------------------(read)
----------------------------------------------------------------------------1805/6 PCM_DATA
--------------------------------------------------------------------------------
return current PCM value when CDDA playback in progress. 
write any val to 1805 latch next sample. 
X_STAT_PCM_CHAN determinate which channel currently latched (left ot right)
--------------------------------------------------------------------------------
----------------------------------------------------------------------------1807 BRM_CTRL
--------------------------------------------------------------------------------

0: ?
1: ?
2: ?
3: ?
4: ?
5: ?
6: ?
7: BRM_UNLOCK

BRM_UNLOCK:
1: unlock bram
0: lock bram

--------------------------------------------------------------------------------(read)
----------------------------------------------------------------------------1808 DPORT
--------------------------------------------------------------------------------
once CD_STAT_DRDY is set, 2048 bytes of sector data can be readed
data can be readed via 1801 also, but it works slow because 
CD_CTRL_DCLK manipulations required
seems it always show the same value as 1801, but works without CD_CTRL_DCLK toggle
--------------------------------------------------------------------------------(write)
----------------------------------------------------------------------------1808/9 AD_ADDR 
--------------------------------------------------------------------------------
1808 ADPCM addres/len latch lo
1809 ADPCM addres/len latch hi
value of this register can be copied to the ADPCM address or ADPCM  sample len
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------180A AD_IO
--------------------------------------------------------------------------------
ADPCM memory i/o
read and write to ADPCM ram via this register. every read or write to this
register read or write increments address. register update internal latch after 
every read operation, so first dummy byte should be read before actual data begins
reads decrement sample len counter, write increment it
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------180B AD_DMA
--------------------------------------------------------------------------------
ADPCM dma control
only bit 0-1 can be read back, all other bits always 0

0: AD_DMA_RUN
1: AD_DMA_EN
2: ?
3: ?
4: ?
5: ?
6: ?
7: ?

0:AD_DMA_RUN:
 enable dma for single block transfer. 
 can be enabled only when data ready (1800 == 0xC8), otherwise no effect.
 once sector fully transferred, it will be turned off automatically.
 if few bytes will be read via 1808 before enable AD_DMA_RUN, then dma 
 transfer length will be reduced on amount of previously readed bytes.
 program should read this bit to make sure dma is started


1:AD_DMA_EN:
 enable dma. bios enable this bit, then waiting: 
 if 180C:1 != 0 or 1803:5 == 0 continue waiting, othervise turn off AD_DMA_EN
 if enabled, dma controller will copy bytes every time when 1800 became C8

--------------------------------------------------------------------------------(read)
----------------------------------------------------------------------------180C AD_STAT
--------------------------------------------------------------------------------
ADPCM status

0: AD_PLAY_END
1: ?
2: ? write pend? bios test this bit during dma. busy loop till it != 0
3: AD_STAT_BUSY
4: ?
5: ?
6: ?
7: ? read pend?

0:AD_PLAY_END:
 seems if mirror of X_STAT_ADPCM_END
 1 when ADPCM dma complete. bits 7 or 4 in 180D clear this flag. 
 clearing is not edge triggered. if bit 180D:4 set, AD_STAT_DMA_END never be set 
 during the reset (AD_CTRL_RESET) it always 0

3:AD_STAT_BUSY: 
 wait for 0 befor than read or write to 180A. constantly busy during playback.
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------180D AD_CTRL
--------------------------------------------------------------------------------
ADPCM address and playback control
all bits can be read back

0: AD_CTRL_SET_WA0
1: AD_CTRL_SET_WA1
2: AD_CTRL_SET_RN
3: AD_CTRL_SET_RA
4: AD_CTRL_SET_LEN
5: AD_CTRL_PLAY
6: AD_CTRL_PMOD
7: AD_CTRL_RESET

0/1:AD_CTRL_SET_WAx: 
 copy 1808/9 to the write address. bios controls this bits in 
 weird way: set both, clear AD_CTRL_SET_WA0, clear AD_CTRL_SET_WA1.
 Any other combinations seems does not work well, sometimes address sets 
 correctly but oftenly i got just some random results.

2:AD_CTRL_SET_RN: 
 swap nibbles in byte during the read if 1

3:AD_CTRL_SET_RA: 
 copy 1808/9 to the read address. 
 bios always read 180A and make little delay before than clear this flag 
 i tried exclude 180A reads and it broke address latching
 seems it because address actually sets when cpu read/write 180A

4:AD_CTRL_SET_LEN: 
 copy 1808/9 to the sample len.
 sample will be permanently set to the constant val while it set, it results 
 infinity playback.
 seems len counter count even if AD_CTRL_PLAY turned off, but audio is muted

5:AD_CTRL_PLAY:
 start sample playback. 

6:AD_CTRL_PMOD: 
 0: do not mute in the end of sample
 1: mute in the end of sample

7:AD_CTRL_RESET: 
 reset ADPCM
 set X_STAT_ADPCM_32K and X_STAT_ADPCM_END to 0
 set sample len to 0
 set adpcm wr/rd addr to 0
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------180E AD_DRATE
--------------------------------------------------------------------------------
ADPCM playback data rate: (KHz) = 32 / (16 - AD_DRATE & $0F))
all bits can be read back
--------------------------------------------------------------------------------(read/write)
----------------------------------------------------------------------------180F AD_FAD
--------------------------------------------------------------------------------
fader and ADPCM ram mode
all bits can be read back

0: ?
1: ?
2: ?
3: ?
4: ?
5: ?
6: ?
7: AD_FAD_RMODE

AD_FAD_RMODE: 
0: byte access to the ADPCM ram
1: block access to the ADPCM ram. in this mode access to ADPCM ram works in 
8-byte block mode. read/write operation via 180A wraps inside of  8-byte block.
address written to the 1808/9 also in block mode, address multiplied on 8.
offset 1 means physical address 8. 
supposedly this mode was designed for using ram over 64K
*extra research shown that in block mode data stored in weird way: step between
bytes 8738 and between nibbles 4369
--------------------------------------------------------------------------------
--------------------------------CD DRIVE COMMANDS-------------------------------
--------------------------------------------------------------------------------